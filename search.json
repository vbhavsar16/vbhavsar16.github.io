[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is Vivek‚Äôs website."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "üåç¬† I‚Äôm based in New York, NY\n‚úâÔ∏è¬† You can contact me at imvivek1695@gmail.com\nüß†¬† I‚Äôm learning DeepXDE, NVIDIA Modulus and TAO Toolkit\nü§ù¬† I‚Äôm open to collaborating on Earth Science Systems and Climate"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "Recommendation Engine: Introduction\n\n\n\n\n\n\nContent Filtering\n\n\nCollaborative Filtering\n\n\n\n\n\n\n\n\n\nApr 28, 2024\n\n\nVivek Bhavsar\n\n\n\n\n\n\n\n\n\n\n\n\nPINN: Introduction\n\n\n\n\n\n\nScientific ML\n\n\n1D Heat Eq.\n\n\nPyTorch\n\n\n\n\n\n\n\n\n\nApr 17, 2024\n\n\nVivek Bhavsar\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nApr 14, 2024\n\n\nVivek Bhavsar\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/pinn_intro/index.html",
    "href": "posts/pinn_intro/index.html",
    "title": "PINN: Introduction",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "Vivek-CV",
    "section": "",
    "text": "It appears you don't have a PDF plugin for this browser.\n    No biggie... you can click here to\n    download the PDF file."
  },
  {
    "objectID": "CV_create.html",
    "href": "CV_create.html",
    "title": "Scientific Machine Learning | Earth Scientist | CFD",
    "section": "",
    "text": "Summary\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n\nExperience\n\n\n\nEducation"
  },
  {
    "objectID": "posts/recom_engine/index.html",
    "href": "posts/recom_engine/index.html",
    "title": "Recommendation Engine: Introduction",
    "section": "",
    "text": "The recommendation engine are widely used to suggest content/itmes to user in persionalized manner. In Qwarke, users will choose the top 3 subject of interest. Data associated with the video including the title, authors, keywords, and key points are saved in the database. There are mainly two types of recommendation engine."
  },
  {
    "objectID": "posts/recom_engine/index.html#types-of-engine",
    "href": "posts/recom_engine/index.html#types-of-engine",
    "title": "Recommendation Engine: Introduction",
    "section": "",
    "text": "There are two types of recommendation engines. 1. Collaborative based filtering 2. Content based filtering\n\n\nThe collaborative filtering is also called matrix completion. The simplest example for this type of algorithm is Similarity based algorithm.\nLet‚Äôs see an example of this algorithm\n#\nFor other types of algorithm, we need to first look at Matrix Factorization"
  },
  {
    "objectID": "about.html#scientific-machine-learning-geophysicist-computational-data-scientist",
    "href": "about.html#scientific-machine-learning-geophysicist-computational-data-scientist",
    "title": "About",
    "section": "",
    "text": "üåç¬† I‚Äôm based in New York, NY\n‚úâÔ∏è¬† You can contact me at imvivek1695@gmail.com\nüß†¬† I‚Äôm learning DeepXDE, NVIDIA Modulus and TAO Toolkit\nü§ù¬† I‚Äôm open to collaborating on Earth Science Systems and Climate"
  },
  {
    "objectID": "posts/recom_engine/index.html#collaborative-based-filtering",
    "href": "posts/recom_engine/index.html#collaborative-based-filtering",
    "title": "Recommendation Engine: Introduction",
    "section": "Collaborative based Filtering",
    "text": "Collaborative based Filtering\nThe collaborative filtering is also called matrix completion. The simplest example for this type of algorithm is Similarity based algorithm.\n\nThe Correlation Algorithm\nFirst, we will look at the simplest data which does not have any features associated with either users or items.\nLet‚Äôs see an example of creating the correlation matrix\nCorrelation_matrix = df.corr(method='pearson')\n\nCorrelation_matrix['video_id'].sort_values(ascending=False).index[1:11]\nThis will give you the correlation matrix of the items or users giving a correlation values in the cells. The top 10 correlated content with the given content will be provided. If user X have watched item Y, then top correlated content with item Y can be recommended to the user.\n\n\nThe Matrix Factorization\nIn this method, the simplest matrix of users x videos will factorized using SVD (Singular Value Decomposition) method. To find matrix B of shape users x features and matrix C of shape videos x features,\n\\[\nargmin\\ \\Sigma (A_{ij} - B_{i}C^{T}_{j})^{2}\n\\]\nThe updated A matrix which will have empty values filled by,\n\\[\n\\hat{A} = B \\cdot C^{T}\n\\]"
  },
  {
    "objectID": "posts/recom_engine/index.html#content-based-filtering",
    "href": "posts/recom_engine/index.html#content-based-filtering",
    "title": "Recommendation Engine: Introduction",
    "section": "Content based Filtering",
    "text": "Content based Filtering\nThe data is dynamic and user‚Äôs interest will change overtime. That is why the content based algorithm should be implemented for all user except for the new users. Data such as watch counts is collected over time as they watch more videos.\n\nThe Similarity Matrix\nFor other types of algorithm, we need to first look at Matrix Factorization\n\nThe cells in the above matrix can be populated with the various information collected, for example, binary (buy/no buy, played/not played, watched/not watched, bookmarked/not bookmarked) or discrete (ratings, total watch time, percentage of video watched).\nThe string type data (For example in Qwarke, title, keywords, key take away, and category of interest) can be converted in vector using CountVectorizer(). All the text feature can be combined in to one feature. Matrix of token count will be created where each combined feature will have all unique words counted in the columns.\nLet‚Äôs see an example of creating a similarity matrix\ncv = CountVectorize()\n\ncount_matrix = cv.fit_transform(data[\"combined_features\"])\n\ncosine_similarity_score = cosine_similarity(count_matrix)\nNow, the score calculated in the similarity matrix here is calculated on a feature.\n\n\nRecommendor Using PySpark\nThe data available can be as simple as users, items, and watch count. Let‚Äôs see an example of reccomending items based on this data using PySpark. The datafrmae has columns user_id, video, and watch_count. Using a StringIndexer, convert the string columns user_id and video to unique ids called user_id_index and video_index\nFor this we are using an Alternating Least Squares (ALS) method to fit the data.\n(training, test) = data.randomSplit([0.5, 0.5])\n\nUSERID = 'user_id_index'\nTRACK = 'video_index'\nCOUNT = 'watch_count'\n\nals = ALS(maxIter=5,\n          regParam=0.01,\n          userCol=USERID,\n          itemCol=TRACK,\n          ratingCol=COUNT)\n\nmodel = als.fit(training)\n\npredictions = model.transform(test)\nNow generate the top 10 recommendation for each users.\nrecs = model.recommendForAllUsers(10)\nrecs.take(1)\nThis will show the 10 recommended videos for user1.\n\n\nStacked Features"
  }
]